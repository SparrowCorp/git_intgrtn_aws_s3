{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Multi-AZ, load balanced and auto scaled (CPU Utilization) pre-installed with AWS CodeDeploy agent, docker and docker-compose.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
		"HealthCheckPort": {
			"Type": "String",
			"Description": "Health Check Port"
    },
		"ACMARN": {
			"Type": "String",
			"Description": "AWS Certificate Manager ARN to be used by Elastic Load Balancer for SSL traffic",
			"ConstraintDescription": "must be a verified & valid AWS ARN."
    },
		"Environment": {
      "Type": "String",
      "Description": "Environment Name",
			"AllowedPattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*"
    },
		"Application": {
      "Type": "String",
      "Description": "Application Name",
			"AllowedPattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*"
    }
  },

  "Mappings" : {
    "EC2RegionMap" : {
		"us-east-1"      : { "64" : "ami-772aa961"},
		"us-east-2"      : { "64" : "ami-8fab8fea"},
		"us-west-1"      : { "64" : "ami-1da8f27d"},
		"us-west-2"      : { "64" : "ami-7c22b41c"},
		"eu-west-1"      : { "64" : "ami-09447c6f"},
		"eu-west-2"      : { "64" : "ami-63342007"},
		"eu-central-1"   : { "64" : "ami-25a97a4a"},
		"ap-northeast-1" : { "64" : "ami-d85e7fbf"},
		"ap-northeast-2" : { "64" : "ami-15d5077b"},
		"ap-south-1" 	 	 : { "64" : "ami-83a8dbec"},
		"sa-east-1" 	   : { "64" : "ami-8df695e1"},
		"ap-southeast-1" : { "64" : "ami-0a19a669"},
		"ap-southeast-2" : { "64" : "ami-807876e3"},
		"ca-central-1"   : { "64" : "ami-beea56da"}
    }
  },

  "Resources" : {
    "DockerHostGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
				"Tags" : [
					{
						"Key": "Name",
						"Value": { "Fn::Join" : [ "-", [ { "Ref" : "Environment" }, { "Ref" : "Application" } ] ] },
						"PropagateAtLaunch": true
					},
					{
						"Key": "Application",
						"Value": { "Ref" : "Application" },
						"PropagateAtLaunch": true
					},
					{
						"Key": "Environment",
						"Value": { "Ref" : "Environment" },
						"PropagateAtLaunch": true
					}
				]
      }
    },

		"IAMAssumeDockerHostInstanceRole": {
			 "Type": "AWS::IAM::Role",
			 "Properties": {
					"AssumeRolePolicyDocument": {
						 "Version" : "2012-10-17",
						 "Statement": [ {
								"Effect": "Allow",
								"Principal": {
									 "Service": [ "ec2.amazonaws.com" ]
								},
								"Action": [ "sts:AssumeRole" ]
						 } ]
					},
					"Path": "/",
					"Policies" : [ {
						"PolicyName": { "Fn::Join" : [ "-", [ "IAM", { "Ref" : "Environment" }, { "Ref" : "Application" }, "EC2", "Policy" ] ] },
						"PolicyDocument": {
							"Version" : "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:Get*",
										"s3:List*"
									],
									"Resource": "*"
								},
								{
									"Action": "logs:*",
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						}
					} ],
					"RoleName": { "Fn::Join" : [ "-", [ "IAM", { "Ref" : "Environment" }, { "Ref" : "Application" }, "EC2", "Role" ] ] }
			 }
		},

		"DockerHostInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [ { "Ref": "IAMAssumeDockerHostInstanceRole" } ],
				"InstanceProfileName": { "Fn::Join" : [ "-", [ "IAM", { "Ref" : "Environment" }, { "Ref" : "Application" }, "InstanceProfile" ] ] }
			}
		},

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "EC2RegionMap", { "Ref" : "AWS::Region" }, "64" ] },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
				"IamInstanceProfile" : { "Ref": "DockerHostInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -x\n",
             "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
             "export LC_CTYPE=en_US.UTF-8\n",
             "export LC_ALL=en_US.UTF-8\n",

             "apt-get update\n",
             "apt-get install -y python-pip ruby2.0 curl apt-transport-https ca-certificates\n",
             "pip install -U pip\n",
             "pip install awscli\n",
             "curl -L https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install > ./install\n",
             "chmod +x ./install\n",
             "./install auto\n",

             "apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D\n",
             "echo \"deb https://apt.dockerproject.org/repo ubuntu-trusty main\" > /etc/apt/sources.list.d/docker.list\n",
             "apt-get update\n",
             "apt-get purge lxc-docker\n",
             "apt-cache policy docker-engine\n",
             "apt-get update\n",
             "apt-get install -y linux-image-extra-$(uname -r)\n",
             "apt-get install -y apparmor\n",
             "apt-get update\n",
             "apt-get install -y docker-engine\n",
             "service docker restart\n",
             "pip install docker-compose\n"
        ]]}}
      }
    },

    "DockerHostScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "DockerHostGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "DockerHostScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "DockerHostGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "DockerHostScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "DockerHostGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "DockerHostScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "DockerHostGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone" : "true",
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : { "Ref" : "HealthCheckPort" },
          "Protocol" : "HTTP"
        },
			  {
          "LoadBalancerPort" : "443",
          "InstancePort" : { "Ref" : "HealthCheckPort" },
          "Protocol" : "HTTPS",
					"SSLCertificateId": { "Ref": "ACMARN" }
        } ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ ":", [ "TCP", { "Ref" : "HealthCheckPort" } ] ] },
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
				"Tags" : [
					{
						"Key": "Application",
						"Value": { "Ref" : "Application" }
					},
					{
						"Key": "Environment",
						"Value": { "Ref" : "Environment" }
					}
				]
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH public access and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : { "Ref" : "HealthCheckPort" },
          "ToPort" : { "Ref" : "HealthCheckPort" },
          "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
          "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
        } ],
				"Tags" : [
					{
						"Key": "Application",
						"Value": { "Ref" : "Application" }
					},
					{
						"Key": "Environment",
						"Value": { "Ref" : "Environment" }
					}
				]
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
    },
		"AutoScalingGroup": {
			"Value": { "Ref" : "DockerHostGroup" },
      "Description": "AutoScaling Group Name",
			"Export" : {
			  "Name" : {
				  "Fn::Sub": "${AWS::StackName}-AutoScalingGroup"
				}
			}
    },
		"StackName": {
			"Value": { "Ref": "AWS::StackName" },
      "Description": "Stack Name"
    }
  }
}
